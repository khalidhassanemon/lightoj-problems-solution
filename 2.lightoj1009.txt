#include<bits/stdc++.h>
using namespace std;
#define     pb              push_back
#define     PB              pop_back
#define     nn              "\n"
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     ss              ' '
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
#define     pi              acos(-1.0)
typedef     long long       ll;
typedef     vector<ll>      vll;

vll adj[20009];
ll visited[100010];
ll level[100010];

ll bfs(ll s)
{
    visited[s]=1;
    level[s]=0;
    queue<int>q;
    q.push(s);
    ll vampire=1,lykan=0;
    while(!q.empty())
    {
        ll u=q.front();
        visited[u]=1;
        q.pop();
        for(ll i=0; i<adj[u].size(); i++)
        {
            ll p=adj[u][i];
            if(visited[p]==0)
                if(!visited[p])
                {
                    visited[p]=1;
                    level[p]=level[u]+1;
                    if(level[p]%2==0) vampire++;
                    else lykan++;
                    q.push(p);
                }
        }

    }
    return max(vampire,lykan);
}

int main()
{
    ll node,edge,t,ans,i,a,b,tc=0,mx;
    S(t);
    while(t--)
    {
        memset(visited,0,sizeof(visited));
        memset(level,0,sizeof(level));
        S(edge);
        for(i=0; i<20009; i++) adj[i].clear();
        mx=0;
        for(i=0; i<edge; i++)
        {
            SS(a,b);
            adj[a].pb(b);
            adj[b].pb(a);
            mx=max(mx,max(a,b));
        }
        ans=0;
        for(i=0; i<mx; i++)
        {
            if(adj[i].size()>0 && !visited[i])
            {
                ll x=bfs(i);
                ans+=x;
            }
        }
        cout<<"Case "<<++tc<<": "<<ans<<endl;
    }
}


